plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7+'
}

jarJar.enable()

group = 'net.tropicraft'
base {
    archivesName = 'Tropicraft'
}

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: parchment_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
        	taskName 'tropicraft_client'

            copyIdeResources = true

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=tropicraft.mixins.json"

            mods {
                tropicraft {
                    source sourceSets.main
                }
            }
        }

        server {
        	taskName 'tropicraft_server'

            copyIdeResources = true

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=tropicraft.mixins.json"

            mods {
                tropicraft {
                    source sourceSets.main
                }
            }
        }

        data {
        	taskName 'tropicraft_data'

            copyIdeResources = true

            workingDirectory project.file('run')

            environment 'target', 'fmluserdevdata'

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=tropicraft.mixins.json"

            mods {
                tropicraft {
                    source sourceSets.main
                }
            }

			args '--mod', 'tropicraft', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"',
				 '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'

        }
    }
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
    maven {
        url "https://maven.tterrag.com/"
    }
	mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    jarJar(implementation(fg.deobf("com.tterrag.registrate:Registrate:MC1.20-${registrate_version}"))) {
        jarJar.ranged(it, "[MC${minecraft_version}-${registrate_version},MC1.21)")
    }

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "tropicraftmod",
            "Specification-Vendor": "Tropicraft",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" :"Tropicraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "tropicraft.mixins.json"
        ])
    }

    archiveClassifier = 'slim'
}

tasks.jarJar.configure {
    // remove '-all' from jarJar jar file
    archiveClassifier = ''
    finalizedBy('reobfJarJar')
}

reobf {
    jarJar { }
}

mixin {
    add sourceSets.main, "tropicraft.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        mod_version: mod_version,
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
