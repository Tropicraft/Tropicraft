plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

jarJar.enable()

group = 'net.tropicraft'
base {
    archivesName = 'Tropicraft'
}

ext.buildnumber = 0

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        workingDirectory project.file('run')

        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        programArguments.addAll '--username', 'Dev###'
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

subsystems {
    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url = "https://maven.ithundxr.dev/snapshots/" }
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    jarJar(implementation("com.tterrag.registrate:Registrate:MC1.21-${registrate_version}")) {
        jarJar.ranged(it, "[MC1.21-${registrate_version},MC1.22)")
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
